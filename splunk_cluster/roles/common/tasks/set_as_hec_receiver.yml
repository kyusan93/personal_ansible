---

# If HEC is to be configured in all in one splunk, token will be generated in all in one splunk, create hecinput app
# If HEC is to be configured in single indexer, token will be generated in single indexer, create hecinput app
# If HEC is to be configured in indexer cluster, token will be generated in master node, create hecinput app and apply to all indexers
# If HEC is to be configured in heavy forwarder with deployment server, token will be generated in deployment server, create hecinput app and apply to all heavy forwarders
# If HEC is to be configured in heavy forwarder without deployment server, token will be generated in heavy forwarder, create hecinput app

- name: Set hec token
  become: true
  uri:
    url: "https://{{ inventory_hostname }}:{{ splunk.ports.mgmt }}/servicesNS/nobody/splunk_httpinput/data/inputs/http"
    method: POST
    user: "{{ splunk.admin.username }}"
    password: "{{ splunk.admin.password }}"
    client_cert: "{{ splunk.home }}/etc/auth/{{ base.company_name }}/{{ host_suffix }}_web_cert.pem"
    client_key: "{{ splunk.home }}/etc/auth/{{ base.company_name }}/{{ host_suffix }}.key"
    validate_certs: false
    body: "name={{ base.company_name }}_token"
    status_code: 201,409
    use_proxy: no
    return_content: yes
  register: get_hec_token
  when:
    - ansible_host in groups[splunk.hec.configure_on]|first

- name: Set hec token fact
  set_fact:
    hec_token: "{{ get_hec_token.content | regex_search(token_reg,'\\1') | join('') }}"
  vars:
        token_reg: 'name=.*token.*>([\w-]+)'
  when:
    - ansible_host in groups[splunk.hec.configure_on]|first

- name: Delete hec token
  become: true
  uri:
    url: "https://{{ inventory_hostname }}:{{ splunk.ports.mgmt }}/servicesNS/nobody/splunk_httpinput/data/inputs/http/{{ base.company_name }}_token"
    method: DELETE
    user: "{{ splunk.admin.username }}"
    password: "{{ splunk.admin.password }}"
    client_cert: "{{ splunk.home }}/etc/auth/{{ base.company_name }}/{{ host_suffix }}_web_cert.pem"
    client_key: "{{ splunk.home }}/etc/auth/{{ base.company_name }}/{{ host_suffix }}.key"
    validate_certs: false
    status_code: 200,202,204
    use_proxy: no
  when:
    - ansible_host in groups[splunk.hec.configure_on]|first

- name:
  set_fact:
    #Values: aio, indexer, cluster_master, heavy forwarder, deployment_server
    hec_directory: "{% if splunk.hec.configure_on == 'cluster_master' %}manager-apps{% elif splunk.hec.configure_on == 'deployment_server' %}deployment-apps{% else %}apps{% endif %}"

- name: Creates {{ hec_directory }}/hecinput/ directory
  become: true
  become_user: "{{ splunk.nix.user }}"
  file:
    path: "{{ splunk.home }}/etc/{{ hec_directory }}/hecinput/local/"
    state: directory
    owner: "{{ splunk.nix.user }}"
    group: "{{ splunk.nix.group }}"
    recurse: yes
  when:
    - ansible_host in groups[splunk.hec.configure_on]|first

- name: Creates inputs.conf in {{ hec_directory }}/hecinput/ directory
  become: true
  become_user: "{{ splunk.nix.user }}"
  ini_file:
    owner: "{{ splunk.nix.user }}"
    group: "{{ splunk.nix.group }}"
    dest: "{{ splunk.home }}/etc/{{ hec_directory }}/hecinput/local/inputs.conf"
    section: "{{ item.section }}"
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "http", key: 'disabled', value: "{{ splunk.hec.disabled }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'disabled', value: "{{ splunk.hec.disabled }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'index', value: "{{ splunk.hec.default_index }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'indexes', value: "{{ splunk.hec.allowed_indexes }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'token', value: "{{ hec_token }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'dedicatedIoThreads', value: "{{ splunk.hec.dedicatedIoThreads }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'maxSockets', value: "{{ splunk.hec.maxSockets }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'maxThreads', value: "{{ splunk.hec.maxThreads }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'maxEventSize', value: "{{ splunk.hec.maxEventSize }}" }
    - { section: "http://{{ base.company_name }}_HEC", key: 'queueSize', value: "{{ splunk.hec.queueSize }}" }
  register: hec_configured
  when:
    - ansible_host in groups[splunk.hec.configure_on]|first

- name: Creates inputs.conf in {{ hec_directory }}/hecinput/ directory
  become: true
  become_user: "{{ splunk.nix.user }}"
  ini_file:
    owner: "{{ splunk.nix.user }}"
    group: "{{ splunk.nix.group }}"
    dest: "{{ splunk.home }}/etc/{{ hec_directory }}/hecinput/local/inputs.conf"
    section: "{{ item.section }}"
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "http", key: 'enableSSL', value: "{{ splunk.hec.ssl }}" }
    - { section: "http", key: 'serverCert', value: "{{ splunk.home }}/etc/auth/{{ base.company_name }}/forwarder_app_cert.pem" }
    - { section: "http", key: 'sslPassword', value: "{{ splunk.hec.sslPassword }}" }
  register: hec_ssl_configured
  when:
    - ansible_host in groups[splunk.hec.configure_on]|first
    - '"enabled" in splunk.hec.ssl'

- name: Creates serverclass.conf in system/local directory
  become: true
  become_user: "{{ splunk.nix.user }}"
  ini_file:
    owner: "{{ splunk.nix.user }}"
    group: "{{ splunk.nix.group }}"
    dest: "{{ splunk.home }}/etc/system/local/serverclass.conf"
    section: "{{ item.section }}"
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "serverClass:hecinput_serverclass", key: 'whitelist.0', value: "{{ groups['heavy_forwarder']|first }}" }
    - { section: "serverClass:hecinput_serverclass:app:hecinput", key: 'restartSplunkWeb', value: "0" }
    - { section: "serverClass:hecinput_serverclass:app:hecinput", key: 'restartSplunkd', value: "1" }
    - { section: "serverClass:hecinput_serverclass:app:hecinput", key: 'stateOnClient', value: "enabled" }
  when:
    - splunk.hec.configure_on == 'deployment_server'
    - ansible_host in groups[splunk.hec.configure_on]|first

- name: Apply cluster-bundle if is cluster_master
  command: "{{ splunk.home }}/bin/splunk apply cluster-bundle -auth {{ splunk.admin.username }}:{{ splunk.admin.password }} --answer-yes"
  become: true
  become_user: "{{ splunk.nix.user }}"
  when: 
    - splunk.hec.configure_on == 'cluster_master'
    - ansible_host in groups[splunk.hec.configure_on]|first
    - hec_configured is changed

- name: Restart splunkd if is aio, indexer or heavyforwarder
  command: "{{ splunk.home }}/bin/splunk restart"
  become: true
  become_user: "{{ splunk.nix.user }}"
  when: 
    - splunk.hec.configure_on == 'aio' or splunk.hec.configure_on == 'indexer' or splunk.hec.configure_on == 'heavyforwarder'
    - ansible_host in groups[splunk.hec.configure_on]|first
    - hec_configured is changed

- name: Reload deploy-server if is deployment_server
  command: "{{ splunk.home }}/bin/splunk reload deploy-server -auth {{ splunk.admin.username }}:{{ splunk.admin.password }} --answer-yes"
  become: true
  become_user: "{{ splunk.nix.user }}"
  when: 
    - splunk.hec.configure_on == 'deployment_server'
    - ansible_host in groups[splunk.hec.configure_on]|first
    - hec_configured is changed
